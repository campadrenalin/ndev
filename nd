#!/bin/bash
set -e

# Set default configuration
: "${NDEV_SOCKET_PATH:=/var/run/docker.sock}"
: "${NDEV_NETWORK_NAME:=ndev-network}"
: "${NDEV_NIX_STORE_MOUNT:=nix-store}"
: "${NDEV_NIX_DB_MOUNT:=nix-db}"
: "${NDEV_CONTAINER_NAME:=ndev}"
: "${NDEV_APP_SOURCE:=$PWD}"
: "${NDEV_IMAGE:=ndev}"

debug() {
	compgen -v | grep '^NDEV_' | while read param; do
		echo "$param=${!param}";
	done
}

build() {
docker build -t "$NDEV_IMAGE" - <<'EOF'
FROM nixos/nix
RUN nix-channel --update

WORKDIR /app/
RUN mkdir -p /app/bin/

ENV SSH_AUTH_SOCK=/ssh-agent
EOF
}

sample_shell_nix() {
cat <<'EOF'
{ pkgs ? import <nixpkgs> {} }:

pkgs.mkShell {

  buildInputs = [
    pkgs.bash
    pkgs.docker
    pkgs.docker-compose
    pkgs.git
    pkgs.vim
  ];

  shellHook = ''
    echo "git:  $(git  --version)"
  '';
}
EOF
}

launch() {
	docker image inspect "$NDEV_IMAGE" > /dev/null || build

	docker network inspect "$NDEV_NETWORK_NAME" > /dev/null || \
		docker network create -d bridge "$NDEV_NETWORK_NAME"

	# TODO: Connect to existing container if it exists
	exec docker run --rm -it \
		--network=$NDEV_NETWORK_NAME \
		--mount "type=bind,src=${NDEV_SOCKET_PATH},target=/var/run/docker.sock" \
		--mount "type=bind,src=${NDEV_APP_SOURCE},target=/app/" \
		--mount "type=bind,src=/run/host-services/ssh-auth.sock,target=/ssh-agent" \
		--mount "type=volume,src=${NDEV_NIX_STORE_MOUNT},target=/nix/store/" \
		--mount "type=volume,src=${NDEV_NIX_DB_MOUNT},target=/nix/var/nix/db/" \
		"$NDEV_IMAGE" nix-shell "$@"
}

solo() {
	launch "$@"
}

usage() {
	echo 'nd --usage       # This text' >&2
	echo 'nd --build       # Regenerate container' >&2
	echo 'nd --example     # Sample shell.nix' >&2
	echo 'nd --debug       # Show variables' >&2
	echo 'nd               # Run a standalone container' >&2
	echo 'nd --command foo # Run a command in a standalone container' >&2
}

case "$1" in
	--usage) usage;;
	--help) usage;;
	-h) usage;;

	--build) build;;
	--example) sample_shell_nix;;
	--debug) debug;;
	*) solo "$@";;
esac
